[ 32515] By: nicholas				   on 2007/11/26  23:54:05
	Log: Integrate:
	     [ 31938]
	     hv_stores() on a literal string is now fractionally more efficient than
	     hv_store().
     Branch: maint-5.8/perl
	  +> mro.c
	  !> gv.c hv.c mg.c op.c pp_hot.c
____________________________________________________________________________
[ 32514] By: nicholas				   on 2007/11/26  23:34:16
	Log: Integrate:
	     [ 31931]
	     Add a new function Perl_hv_common_key_len(), which contains the
	     manipulations to convert negative lengths to positive length + UTF-8
	     flag. hv_delete(), hv_exists(), hv_fetch(), hv_store() and
	     hv_store_flags() all become mathoms. The macros hv_fetchs() and
	     hv_stores() call hv_common() directly.
	     
	     [ 31932]
	     Remove now-unnecessary =cuts where POD is now adjacent to POD.
	     
	     [ 31937]
	     Fix Win32 breakage caused by #31926
     Branch: maint-5.8/perl
	  !> embed.fnc embed.h global.sym handy.h hv.c hv.h mathoms.c
	  !> proto.h
____________________________________________________________________________
[ 32513] By: nicholas				   on 2007/11/26  23:07:51
	Log: Integrate:
	     [ 31916]
	     Send all delete()/delete_ent() calls via S_hv_fetch_common().
	     This puts all the key normalisation code in one place.
	     
	     [ 31919]
	     Make hv_fetch_common() non-static, and change its name to hv_common(),
	     as it now also performs hv_delete()/hv_delete_ent()
	     
	     [ 31924]
	     Convert hv_delete_ent(), hv_exists_ent(), hv_fetch_ent() and
	     hv_store_ent() to macros, and consign the function bodies to history.
	     Er, mathoms.c
	     
	     [ 31925]
	     Change 31919 forgot to add Perl_hv_common to global.sym
	     
	     [ 31926]
	     Switch Perl_hv_common() to returning void * rather than HE *.
	     
	     [ 31927]
	     Casts needed in mathoms.c to make it compile with g++ after the
	     making Perl_hv_common() return void *.
	     
	     [ 31930]
	     Move the SV dereference of Perl_hv_fetch()/Perl_hv_store()/
	     Perl_hv_store_flags() into Perl_hv_common(). All already pass in
	     HV_FETCH_JUST_SV, which only these three pass in.
     Branch: maint-5.8/perl
	  !> embed.fnc embed.h global.sym hv.c hv.h mathoms.c proto.h
____________________________________________________________________________
[ 32512] By: nicholas				   on 2007/11/26  22:24:26
	Log: Integrate:
	     [ 23843]
	     Subject: [PATCH bleadperl] Re: [perl #31924] %INC caching failure-case problem
	     From: Rick Delaney <rick@bort.ca>
	     Date: Wed, 13 Oct 2004 12:40:18 -0400
	     Message-ID: <20041013164018.GA32174@biff.bort.ca>
	     
	     [ 23873]
	     Revert change 23843.
	     (See discussion for bug [perl #31924])
	     
	     [ 31898]
	     For an LVALUE fetch, "hv_fetch()" will recurse into "hv_store()" for a
	     hash with magic. Field hashes have u magic, so this recursion triggers.
	     However, key conversion replaces the original key with the converted
	     key, so we need to ensure that conversion happens exactly once, else
	     for a non-idempotent key conversion routine (eg ROT13) we will see
	     double conversion in this case.
     Branch: maint-5.8/perl
	  !> cop.h hv.c hv.h
____________________________________________________________________________
[ 32511] By: nicholas				   on 2007/11/26  21:40:46
	Log: Integrate:
	     [ 28341]
	     Add missing file to MANIFEST
     Branch: maint-5.8/perl
	  !> MANIFEST
____________________________________________________________________________
[ 32510] By: nicholas				   on 2007/11/26  21:35:15
	Log: Integrate:
	     [ 26523]
	     re-implement MY_CXT API more efficiently, and add explicit
	     interpeter arg variant
	     
	     [ 27000]
	     Use a union for storing the shared hash key reference count, rather
	     than messy pointer hacks.
	     
	     [ 27636]
	     Fix bug 36267 - assigning to a tied hash shouldn't change the
	     underlying hash. (It used to, if the underlying hash had had storage
	     allocated). This has the side effect of changing the return value from
	     hv_store and hv_store_ent for some tied hash scenarios. But *to*
	     something consistent (ly crazy)
	     
	     [ 31898]
	     For an LVALUE fetch, "hv_fetch()" will recurse into "hv_store()" for a
	     hash with magic. Field hashes have u magic, so this recursion triggers.
	     However, key conversion replaces the original key with the converted
	     key, so we need to ensure that conversion happens exactly once, else
	     for a non-idempotent key conversion routine (eg ROT13) we will see
	     double conversion in this case.
	     
	     [ 31905]
	     Call the key transformation function for hv_delete().
	     Honour the HV_DISABLE_UVAR_XKEY for hv_delete().
	     Test this.
	     [Pass in 3 more parameters to S_hv_magic_uvar_xkey()]
	     
	     [ 31912]
	     Call the key transformation function for hv_exists()/hv_fetch()/
	     hv_store(). (And test this)
	     
	     [ 31914]
	     Parameterise the code that tests the rot13 hash, and add a second
	     hashtype to test - bitflip (that xors code point with 32).
	     
	     [ 31915]
	     Lots more tests with many permuations of 7, 8 and $lots bit data.
	     
	     [ 31923]
	     Use Perl_hv_common() to test disabling the key conversion in hash
	     lookups.
	     
	     [ 31929]
	     ext/XS/APITest/APITest.xs was suffering casting issues with g++
	     as well after the addition of Perl_hv_common().
	     
	     [ 32483]
	     Use a new (clean) anonymous hash for each loop, rather than a hash in
	     the pad, as the latter can change internal state sufficiently to
	     confuse matters (even though in all cases it has no keys and from
	     Perl space is "measurably" identical).
	     
	     [ 32500]
	     Get APItest.xs compiling on 5.8.x by making the compilation of the
	     Perl_hv_common() test code conditional on the macro hv_common being
	     defined, and the refcounted_he code conditional on it being 5.9 or
	     later.
	     
	     [ 32501]
	     Hack round the fact that UNITCHECK is nothing special on 5.8.x by
	     conditionally creating a sub UNITCHECK(&);
	     
	     [ 32502]
	     UNITCHECK isn't anything special in 5.8.x, so don't run those tests.
	     
	     [ 32503]
	     Skip the op.t API test as it's not relevant to 5.8.x (%^H propagation).
	     Correct the expectations of hash.t and svsetsv.t for 5.8.x.
	     
	     [ 32507]
	     Test both dMY_CXT and dMY_CXT_INTERP.
     Branch: maint-5.8/perl
	  +> ext/XS/APItest/t/op.t
	  !> ext/XS/APItest/APItest.pm ext/XS/APItest/APItest.xs
	  !> ext/XS/APItest/Makefile.PL ext/XS/APItest/t/hash.t
	  !> ext/XS/APItest/t/my_cxt.t ext/XS/APItest/t/svsetsv.t
	  !> ext/XS/APItest/t/xs_special_subs_require.t
____________________________________________________________________________
[ 32509] By: nicholas				   on 2007/11/26  19:57:07
	Log: For 5.8.8 and earlier, always call newCONSTSUB(), as the interpreter
	     doesn't support proxy constant subroutines. For all 5.8.x add a cast
	     to (char *) for the second argument to newCONSTSUB().
     Branch: maint-5.8/perl
	   ! lib/ExtUtils/Constant/ProxySubs.pm
____________________________________________________________________________
[ 32506] By: nicholas				   on 2007/11/26  18:02:05
	Log: Integrate:
	     [ 32505]
	     A dummy implementation of dMY_CXT_INTERP for unthreaded builds.
     Branch: maint-5.8/perl
	  !> perl.h
____________________________________________________________________________
[ 32486] By: nicholas				   on 2007/11/25  16:28:05
	Log: An implementation of dMY_CXT_INTERP() for 5.8.x
     Branch: maint-5.8/perl
	   ! perl.h
____________________________________________________________________________
[ 32479] By: nicholas				   on 2007/11/24  12:06:56
	Log: Integrate:
	     [ 32464]
	     FAQ sync
	     
	     [ 32466]
	     Subject: [PATCH] document return value of Getopt::Std::getopts()
	     From: Mark Jason Dominus <mjd@plover.com>
	     Date: Fri, 23 Nov 2007 09:54:38 -0500
	     Message-ID: <20071123145438.6593.qmail@plover.com>
	     
	     [ 32475]
	     Subject: [PATCH] Document different kill(-9, ...) semantics on Windows
	     From: "Jan Dubois" <jand@activestate.com>
	     Date: Fri, 23 Nov 2007 14:48:43 -0800
	     Message-ID: <003201c82e23$0003a0f0$000ae2d0$@com>
	     
	     [ 32478]
	     Eliminating the duplicate logic in S_method_common() and
	     Perl_gv_fetchmethod_autoload() is clearly TODO.
	     Move the paragraph
	     "strcat(), strcpy(), strncat(), strncpy(), sprintf(), vsprintf()"
	     to the section "Tasks that need a little C knowledge" as it doesn't
	     need any XS knowledge.
     Branch: maint-5.8/perl
	  !> gv.c lib/Getopt/Std.pm pod/perlfaq.pod pod/perlfaq1.pod
	  !> pod/perlfaq2.pod pod/perlfaq3.pod pod/perlfaq4.pod
	  !> pod/perlfaq5.pod pod/perlfaq6.pod pod/perlfaq7.pod
	  !> pod/perlfaq8.pod pod/perlport.pod pod/perltodo.pod
____________________________________________________________________________
