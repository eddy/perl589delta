=head1 NAME

perldelta - what is new for perl v5.8.9

=head1 DESCRIPTION

This document describes differences between the 5.8.8 release and
the 5.8.9 release.

=head1 Incompatible Changes

There are no changes incompatible with 5.8.8.

=head1 Core Enhancements

=head1 Modules and Pragmata

=over

=item *

C<B> upgraded from 1.09_01 to 1.19.

=over

=item *

consting and PMOP handling fixes.

=item *

export B_sub_generation(), B::NV::COP_SEQ_RANGE_LOW(),
B::NV::COP_SEQ_RANGE_HIGH(), B::NV::PARENT_PAD_INDEX(),
B::NV::PARENT_FAKELEX_FLAGS()

=item *

fix B::PV::PVBM. It was missing the last table entry before.

=item *

B::BM::PREVIOUS returns now U32, not U16.

=item *

add B::GV::isGV_with_GP() returning always TRUE

=item *

B::CV::START and B:CV::ROOT return now NULL on an XSUB,
B::CV::XSUB and B::CV::XSUBANY return 0 on a non-XSUB.

=item *

New type B::HE added with methods VAL, HASH, SVKEY_force

=back

=item *

C<CPAN> upgraded to version 1.9101

=item *

C<threads::shared> upgraded to version 1.11

=over

=item *

User locks are now store in a safier manner.

=back

=item *

C<Socket> upgraded to version 1.79

=over

=item *

This fixes an optimistic use of C<gethostbyname()>.

=back

=item *

C<XSLoader> upgraded to version 0.08

=back

=head1 Utility Changes

=head1 New Documentation

=head1 Performance Enhancements

=over

=item *

The default since perl 5.000 has been for perl to create an empty scalar
with every new typeglob. The increased use of lexical variables means that
most are now unused. Thanks to Nicholas Clark's efforts, Perl can now be
compiled with C<-DPERL_DONT_CREATE_GVSV> to avoid creating these empty scalars.
This will significantly decrease the number of scalars allocated for all
configurations, and the number of scalars that need to be copied for ithread
creation. Whilst this option is binary compatible with existing perl
installations, it does change a long-standing assumption about the
internals, hence it is not enabled by default, as some third party code may
rely on the old behaviour.

We would recommend testing with this configuration on new deployments of
perl, particularly for multi-threaded servers, to see whether all third party
code is compatible with it, as this configuration may give useful performance
improvements. For existing installations we would not recommend changing to
this configuration unless thorough testing is performed before deployment.

=item *

Reblessing an object from a class that doesn't use overloads to one
that does (or vice versa) is now faster.

=back

=head1 Installation and Configuration Improvements

F<g++> support was tuned, especially for FreeBSD.

C<Configure> is now better at removing temporary files.

There are improved hints for DEC/OSF.

=head1 Selected Bug Fixes

=head1 New or Changed Diagnostics

=head1 Changed Internals

C<av_reify>, C<lex_end>, C<mod>, C<op_clear>, C<pop_return>, C<qerror>, C<setdefout>, C<vivify_defelem> and C<yylex> are now visible to perl core extensions. This was required by L<Data::Alias>.

=head1 New Tests

=head1 Known Problems

=head1 Platform Specific Problems

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org.  There may also be
information at http://www.perl.org, the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.  You can browse and search
the Perl 5 bugs at http://bugs.perl.org/

=head1 SEE ALSO

The F<Changes> file for exhaustive details on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut

